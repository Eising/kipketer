class Hastighedstest < Sinatra::Base
    require 'open3'
    # Launches owping agains a remote address
    #
    # @param remote [String] the remote server ip
    # @return [Hash] the results in a Hash format
    def run_owamp(remote)
        #owping_bin = "/usr/local/bin/owping" # FIXME before release
        owping_bin = settings.binaries["owping"]
        owping_opts = "-c 1000 -i .01 -n m #{remote}"
        results = {}
        # Run test a-b
        Open3.popen3("#{owping_bin} #{owping_opts}") do |stdin, stdout, stderr, thread|
            { :out => stdout, :err => stderr }.each do |key, stream|
                Thread.abort_on_exception=true
                te = Thread.new do
                    until (raw_line = stream.gets).nil? do
                        if res = raw_line.match(/---.*to\s\[#{remote}/)
                            direction = :local
                        end
                        if res = raw_line.match(/---.*from\s\[#{remote}/)
                            direction = :remote
                        end
                        if res = raw_line.match(/^(?<sent>\d+)\ssent,\s(?<lost>\d+)\slost\s\((?<percentage>\d+\.\d+%)\),\s(?<duplicates>\d+)\sduplicates$/)
                            loss = { :loss => res["percentage"] }
                            if results[direction]
                                results[direction].merge loss
                            else
                                results[direction] = loss
                            end
                        end
                        if res = raw_line.match(/^one-way delay min\/median\/max = (?<min>\d+(?:\.\d+)?)\/(?<median>\d+(?:\.\d+)?)\/(?<max>\d+(?:\.\d+)?) ms/)
                            results[direction][:min] = res["min"]
                            results[direction][:median] = res["median"]
                            results[direction][:max] = res["max"]
                        end
                        if res = raw_line.match(/^one-way jitter = (?<jitter>\d+(?:\.\d+)?) ms/)
                            results[direction][:jitter] = res["jitter"]
                        end
                    end
                end
                te.join
            end
            thread.join
        end
        results
    end

    # Verifies the owping data
    #
    # @todo The values against which results are validated should not be hard coded.
    # @param data [Hash] results generated by #run_owamp
    # @param extended [Bool] include validation errors in output
    # @return either returns true or false, or with extended set to true, returns an array that includes the error
    def verify_owamp(data, extended=false)

        errors = []
        failed = false
        if data.has_key? :local
            directions = [:local, :remote]
        else
            directions = ["local", "remote"]
        end
        directions.each do |direction|
            if data.has_key? direction
                begin
                    if data[direction][:max].to_f > 15 
                        errors << "#{direction}: Max RTT over 15ms"
                        failed = true
                    end
                    if data[direction][:jitter].to_f > 10
                        errors << "#{direction}: Jitter over 10 ms"
                        failed = true
                    end
                    if data[direction][:loss].to_f > 0.5
                        errors << "#{direction}: Packet loss over 0.5%"
                        failed = true
                    end
                rescue
                    errors << "An unhanded exception occured"
                    failed = true
                end
            else
                errors << "No data found for test direction #{direction}."
                failed = true
            end
        end

        if extended
            if failed
                [false, errors]
            else
                [true, nil]
            end
        else
            if failed
                return false
            else
                return true
            end
        end
    end

end
